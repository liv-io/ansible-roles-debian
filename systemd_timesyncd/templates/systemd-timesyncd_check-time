#!/usr/bin/env sh

{{ansible_managed|comment(decoration='#')}}

# Shell variables

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin'

# Commands

WHICH='/usr/bin/which' && [ -x ${WHICH} ] || { echo "Error: Command 'which' not found."; exit 127; }
BASENAME=$(${WHICH} basename) || { echo "Error: Command 'basename' not found."; exit 127; }
DATE=$(${WHICH} date) || { echo "Error: Command 'date' not found."; exit 127; }
ECHO=$(${WHICH} echo) || { echo "Error: Command 'echo' not found."; exit 127; }
EXPR=$(${WHICH} expr) || { echo "Error: Command 'expr' not found."; exit 127; }
HOSTNAME=$(${WHICH} hostname) || { echo "Error: Command 'hostname' not found."; exit 127; }
LOGGER=$(${WHICH} logger) || { echo "Error: Command 'logger' not found."; exit 127; }
RM=$(${WHICH} rm) || { echo "Error: Command 'rm' not found."; exit 127; }
TOUCH=$(${WHICH} touch) || { echo "Error: Command 'touch' not found."; exit 127; }
WHOAMI=$(${WHICH} whoami) || { echo "Error: Command 'whoami' not found."; exit 127; }

AWK=$(${WHICH} awk) || { echo "Error: Command 'awk' not found."; exit 127; }
BC=$(${WHICH} bc) || { echo "Error: Command 'bc' not found."; exit 127; }
GREP=$(${WHICH} grep) || { echo "Error: Command 'grep' not found."; exit 127; }
SED=$(${WHICH} sed) || { echo "Error: Command 'sed' not found."; exit 127; }
SLEEP=$(${WHICH} sleep) || { echo "Error: Command 'sleep' not found."; exit 127; }
STAT=$(${WHICH} stat) || { echo "Error: Command 'stat' not found."; exit 127; }
TIMEDATECTL=$(${WHICH} timedatectl) || { echo "Error: Command 'timedatectl' not found."; exit 127; }
TR=$(${WHICH} tr) || { echo "Error: Command 'tr' not found."; exit 127; }

{% if (systemd_timesyncd_monitor_mail_state == True) %}
MAILX=$(${WHICH} mailx) || { echo "Error: Command 'mailx' not found."; exit 127; }
{% endif %}

# Environment variables

HOST=$(${HOSTNAME} -s) || { echo "Error: Host name unknown."; exit 68; }
SCRIPT="$(${BASENAME} $0)[$$]" || { echo "Error: Command invoked cannot execute."; exit 126; }
SCRIPT_NAME="$(${BASENAME} $0)" || { echo "Error: Command invoked cannot execute."; exit 126; }
TIME_START=$(${DATE} '+%s')
USER='{{file_owner_systemd_timesyncd_check_time}}'
LOCKFILE='/var/tmp/systemd-timesyncd_check-time.lock'
TEXTFILE_COLLECTOR='{{systemd_timesyncd_monitor_prom_textfile_collector}}'

OFFSET_LIMIT='{{ systemd_timesyncd_offset_limit}}'
POLL_INTERVAL_MAX_SEC={{ systemd_timesyncd_poll_interval_max_sec }}

{% if (systemd_timesyncd_monitor_mail_state == True) %}
MAIL_FROM_ADDRESS='{{systemd_timesyncd_monitor_mail_from_address}}'
MAIL_TO_ADDRESS='{% for item in systemd_timesyncd_monitor_mail_to_address %}{{item}}{% if not loop.last %},{% endif %}{% endfor %}'
MAIL_SUBJECT='systemd-timesyncd: Check Time - Error ({{ansible_hostname}})'
{% endif %}

# Functions

{% if (systemd_timesyncd_monitor_mail_state == True) %}
mail_error() {
    local exit_code=${1}
    local message=${2}
    local mail_body="ERROR

Message     : ${message}
Exit Code   : ${exit_code}
Date & Time : $(${DATE} '+%Y-%m-%dT%H:%M:%S%z')

SCRIPT

Name        : ${SCRIPT_NAME}
Type        : Shell script
PID         : ${$}

SYSTEM

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}"

    ${ECHO} "${mail_body}" | ${MAILX} -r "${MAIL_FROM_ADDRESS}" -s "${MAIL_SUBJECT}" "${MAIL_TO_ADDRESS}" >/dev/null 2>&1
}
{% endif %}

{% if (systemd_timesyncd_monitor_prom_state == True) %}
update_prom() {
    local exit_code=${1}
    local time_exec=${2}

    if [ -w "${TEXTFILE_COLLECTOR}" ]; then
        ${ECHO} -e "# HELP systemd_timesyncd_check_time_exit The script's exit code.\n"\
"# TYPE systemd_timesyncd_check_time_exit counter\n"\
"systemd_timesyncd_check_time_exit ${exit_code}" >"${TEXTFILE_COLLECTOR}/systemd_timesyncd_check_time_exit.prom"

        if [ -z "${TIME_START}" ]; then
            ${RM} -f "${TEXTFILE_COLLECTOR}/systemd_timesyncd_check_time_start.prom"
        else
            ${ECHO} -e "# HELP systemd_timesyncd_check_time_start The script's start time in epoch.\n"\
"# TYPE systemd_timesyncd_check_time_start counter\n"\
"systemd_timesyncd_check_time_start ${TIME_START}" >"${TEXTFILE_COLLECTOR}/systemd_timesyncd_check_time_start.prom"
        fi

        if [ -z "${time_exec}" ]; then
            ${RM} -f "${TEXTFILE_COLLECTOR}/systemd_timesyncd_check_time_duration.prom"
        else
            ${ECHO} -e "# HELP systemd_timesyncd_check_time_duration The script's execution duration in seconds.\n"\
"# TYPE systemd_timesyncd_check_time_duration counter\n"\
"systemd_timesyncd_check_time_duration ${time_exec}" >"${TEXTFILE_COLLECTOR}/systemd_timesyncd_check_time_duration.prom"
        fi

        if [ -z "${OFFSET_RAW_S}" ]; then
            ${RM} -f "${TEXTFILE_COLLECTOR}/systemd_timesyncd_check_time_offset.prom"
        else
            ${ECHO} -e "# HELP systemd_timesyncd_check_time_offset The system time offset in seconds.\n"\
"# TYPE systemd_timesyncd_check_time_offset counter\n"\
"systemd_timesyncd_check_time_offset{limit=\"${OFFSET_LIMIT}\"} ${OFFSET_RAW_S}" >"${TEXTFILE_COLLECTOR}/systemd_timesyncd_check_time_offset.prom"
        fi
    fi
}
{% endif %}

check_script_user() {
    if [ "$(${WHOAMI})" != "${USER}" ]; then
        local exit_code=77
        local message="Please run script as user '${USER}'"

        if [ -t 1 ]; then
            ${ECHO} "$(${DATE} '+%Y-%m-%dT%H:%M:%S%z') - ${HOST} - ${SCRIPT}: ${message}" >&2
        fi

        exit ${exit_code}
    fi
}

create_lockfile() {
    if [ ! -e "${LOCKFILE}" ]; then
        ${TOUCH} ${LOCKFILE} || log_and_exit_on_error "${?}" 'Could not create lockfile. Please investigate.'
    else
        log_and_exit_on_error "${?}" 'Lockfile does already exist. Please investigate.'
    fi
}

remove_lockfile() {
    if [ -e "${LOCKFILE}" ]; then
        ${RM} -f ${LOCKFILE} || log_and_exit_on_error "${?}" 'Could not remove lockfile. Please investigate.'
    else
        log_and_exit_on_error "${?}" 'Lockfile did not exist. Please investigate.'
    fi
}

log_and_exit_on_error() {
    local exit_code=${1}
    local message=${2}

    if [ "${exit_code}" -ne 0 ]; then
        ${RM} -f ${LOCKFILE}

        if [ -t 1 ]; then
            ${ECHO} "$(${DATE} '+%Y-%m-%dT%H:%M:%S%z') - ${HOST} - ${SCRIPT}: ${message}" >&2
        fi

        ${LOGGER} -t ${SCRIPT} "${message}"

{% if (systemd_timesyncd_monitor_mail_state == True) %}
        mail_error ${exit_code} "${message}"
{% endif %}

{% if (systemd_timesyncd_monitor_prom_state == True) %}
        update_prom "${exit_code}" "${time_exec}"
{% endif %}

        exit ${exit_code}
    fi
}

log_and_exit() {
    local time_end=$(${DATE} '+%s')
    local time_exec=$(${EXPR} ${time_end} - ${TIME_START})
    local time_hr=$(${DATE} -d "1970-01-01 ${time_exec} sec" '+%H:%M:%S')
    local exit_code=${1}
    local message=${2}

    if [ -t 1 ]; then
        ${ECHO} "$(${DATE} '+%Y-%m-%dT%H:%M:%S%z') - ${HOST} - ${SCRIPT}: ${message}"
    fi

    ${LOGGER} -t ${SCRIPT} "${message} Duration: ${time_hr}"

{% if (systemd_timesyncd_monitor_prom_state == True) %}
    update_prom "${exit_code}" "${time_exec}"
{% endif %}

    exit ${exit_code}
}

get_system_time_status() {
    local time_initial=0

    # Wait while 'unsynchronised'
    while ! ${TIMEDATECTL} | ${GREP} 'System clock synchronized: yes' >/dev/null 2>&1 ; do
        log_and_exit_on_error "${?}" 'Unable to get system time status.'
        if [ "${time_initial}" -lt 32 ]; then
            time_initial=$(${EXPR} "${time_initial}" + 2)
            ${SLEEP} "${time_initial}"
        else
            log_and_exit_on_error '1' 'System time is not synchronized.'
        fi
    done
}

get_system_time_unit() {
    OFFSET_UNIT=$(${TIMEDATECTL} timesync-status | ${GREP} 'Offset:' | ${AWK} -F': ' '{print $2}' | ${TR} -cd [:alpha:])
    log_and_exit_on_error "${?}" 'Unable to get system time offset unit.'
}

get_system_time_offset() {
    OFFSET_RAW=$(${TIMEDATECTL} timesync-status | ${GREP} 'Offset:' | ${AWK} -F': ' '{print $2}' | ${TR} -d [:alpha:] | ${SED} 's@[+]@@g')
    log_and_exit_on_error "${?}" 'Unable to get system time offset.'

    if [ "${OFFSET_UNIT}" = "ms" ]; then
        OFFSET_RAW_S=$(${ECHO} "${OFFSET_RAW} / 1000" | ${BC} -l | ${AWK} '{printf "%f", $0}')
        log_and_exit_on_error "${?}" 'Unable to convert system time offset raw from milliseconds to seconds.'
    elif [ "${OFFSET_UNIT}" = "us" ]; then
        OFFSET_RAW_S=$(${ECHO} "${OFFSET_RAW} / 1000000" | ${BC} -l | ${AWK} '{printf "%f", $0}')
        log_and_exit_on_error "${?}" 'Unable to convert system time offset raw from microseconds to seconds.'
    else
        log_and_exit_on_error "1" 'Unable to convert system time offset raw (unit unknown).'
    fi
}

convert_system_time_offset() {
    OFFSET=$(${ECHO} "${OFFSET_RAW}" | ${SED} 's@[-]@@g')
    log_and_exit_on_error "${?}" 'Unable to convert system time offset.'

    if [ "${OFFSET_UNIT}" = "ms" ]; then
        OFFSET=$(${ECHO} "${OFFSET_RAW} / 1000" | ${BC} -l | ${AWK} '{printf "%f", $0}')
        log_and_exit_on_error "${?}" 'Unable to convert system time offset from milliseconds to seconds.'
    elif [ "${OFFSET_UNIT}" = "us" ]; then
        OFFSET=$(${ECHO} "${OFFSET_RAW} / 1000000" | ${BC} -l | ${AWK} '{printf "%f", $0}')
        log_and_exit_on_error "${?}" 'Unable to convert system time offset from microseconds to seconds.'
    else
        log_and_exit_on_error "1" 'Unable to convert system time offset (unit unknown).'
    fi
}

check_system_time_offset() {
    if [ -z "${OFFSET}" ]; then
        log_and_exit_on_error '1' 'System time is not synchronized with any peer.'
    elif [ $(${ECHO} "${OFFSET} >= ${OFFSET_LIMIT}" | ${BC} -l) -ne 0 ]; then
        log_and_exit_on_error '1' "System time offset limit exceeded (${OFFSET} s / ${OFFSET_LIMIT} s)."
    fi
}

get_clock_mtime() {
    TIME_CLOCK=$(${STAT} --format=%Y /var/lib/systemd/timesync/clock)
    log_and_exit_on_error "${?}" 'Unable to get clock mtime.'
}

calculate_last_sync() {
    LAST_SYNC=$(${EXPR} "${TIME_START}" - "${TIME_CLOCK}")
    log_and_exit_on_error "${?}" 'Unable to calculate last synchronization.'
}

calculate_max_sync() {
    MAX_SYNC=$(${EXPR} "${POLL_INTERVAL_MAX_SEC}" \* 3)
    log_and_exit_on_error "${?}" 'Unable to calculate maximum synchronization margin.'
}

# Establish run order
main() {
    check_script_user
    create_lockfile
    get_system_time_status
    get_system_time_unit
    get_system_time_offset
    convert_system_time_offset
    check_system_time_offset
    get_clock_mtime
    calculate_last_sync
    calculate_max_sync
    remove_lockfile
    log_and_exit '0' 'System time is synchronized.'
    if [ "${LAST_SYNC}" -gt "${MAX_SYNC}" ]; then
        # Log if time since last successful synchronization is greater than 3x PollIntervalMaxSec
        log_and_exit '0' "System time is synchronized, but not renewed for more than ${TIME_MAX} seconds."
    else
        log_and_exit '0' 'System time is synchronized.'
    fi
}

main
