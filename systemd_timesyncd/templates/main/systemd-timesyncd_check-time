#!/usr/bin/env sh

{{ansible_managed|comment(decoration='#')}}

# SHELL VARIABLES

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin'

# COMMANDS

which='/usr/bin/which' && [ -x ${which} ] || { echo "Error: Command 'which' not found."; exit 127; }
basename=$(${which} basename) || { echo "Error: Command 'basename' not found."; exit 127; }
date=$(${which} date) || { echo "Error: Command 'date' not found."; exit 127; }
echo=$(${which} echo) || { echo "Error: Command 'echo' not found."; exit 127; }
expr=$(${which} expr) || { echo "Error: Command 'expr' not found."; exit 127; }
grep=$(${which} grep) || { echo "Error: Command 'grep' not found."; exit 127; }
hostname=$(${which} hostname) || { echo "Error: Command 'hostname' not found."; exit 127; }
logger=$(${which} logger) || { echo "Error: Command 'logger' not found."; exit 127; }
{% if (systemd_timesyncd_monitor_mail_state == True) %}
mailx=$(${which} mailx) || { echo "Error: Command 'mailx' not found."; exit 127; }
{% endif %}
rm=$(${which} rm) || { echo "Error: Command 'rm' not found."; exit 127; }
sleep=$(${which} sleep) || { echo "Error: Command 'sleep' not found."; exit 127; }
stat=$(${which} stat) || { echo "Error: Command 'stat' not found."; exit 127; }
timedatectl=$(${which} timedatectl) || { echo "Error: Command 'timedatectl' not found."; exit 127; }
touch=$(${which} touch) || { echo "Error: Command 'touch' not found."; exit 127; }
whoami=$(${which} whoami) || { echo "Error: Command 'whoami' not found."; exit 127; }

# VARIABLES

host=$(${hostname} -s) || { echo "Error: Host name unknown."; exit 68; }
script="$(${basename} $0)[$$]" || { echo "Error: Command invoked cannot execute."; exit 126; }
time_start=$(${date} '+%s')
user='{{file_owner_systemd_timesyncd_check_time}}'
lockfile='/var/tmp/systemd-timesyncd_check-time.lock'
retval=0
severity='Debug'
message='Please check log files for more information.'

poll_interval_max_sec={{ systemd_timesyncd_poll_interval_max_sec }}
textfile_collector='{{systemd_timesyncd_monitor_prom_textfile_collector}}'

{% if (systemd_timesyncd_monitor_mail_state == True) %}
mail_from_address='{{systemd_timesyncd_monitor_mail_from_address}}'
mail_to_address='{% for item in systemd_timesyncd_monitor_mail_to_address %}{{item}}{% if not loop.last %},{% endif %}{% endfor %}'
mail_subject='systemd-timesyncd: Check Time - Error ({{ansible_hostname}})'
{% endif %}

# FUNCTIONS

{% if (systemd_timesyncd_monitor_mail_state == True) %}
mail_error() {
  retval="$1"
  severity="$2"
  message="$3"
  mail_body="
ERROR

Message     : ${message}
Severity    : ${severity}
Date & Time : $(${date} '+%Y-%m-%dT%H:%M:%S%z')

SCRIPT

Name        : systemd-timesyncd_check-time
Type        : Shell script
PID         : $$

SYSTEM

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}"

  ${echo} "${mail_body}" | ${mailx} -r "${mail_from_address}" -s "${mail_subject}" "${mail_to_address}" > /dev/null 2>&1
}
{% endif %}

{% if (systemd_timesyncd_monitor_prom_state == True) %}
update_prom() {
  retval="$1"
  time_start="$2"
  time_exec="$3"

  if [ -w "${textfile_collector}" ]; then
    ${echo} -e "# HELP systemd_timesyncd_check_time_exit The script's exit code.\n"\
"# TYPE systemd_timesyncd_check_time_exit counter\n"\
"systemd_timesyncd_check_time_exit ${retval}" > "${textfile_collector}/systemd_timesyncd_check_time_exit.prom"

    if [ -z "${time_start}" ] ; then
      ${rm} -f "${textfile_collector}/systemd_timesyncd_check_time_start.prom"
    else
      ${echo} -e "# HELP systemd_timesyncd_check_time_start The script's start time in epoch.\n"\
"# TYPE systemd_timesyncd_check_time_start counter\n"\
"systemd_timesyncd_check_time_start ${time_start}" > "${textfile_collector}/systemd_timesyncd_check_time_start.prom"
    fi

    if [ -z "${time_exec}" ] ; then
      ${rm} -f "${textfile_collector}/systemd_timesyncd_check_time_duration.prom"
    else
      ${echo} -e "# HELP systemd_timesyncd_check_time_duration The script's execution duration in seconds.\n"\
"# TYPE systemd_timesyncd_check_time_duration counter\n"\
"systemd_timesyncd_check_time_duration ${time_exec}" > "${textfile_collector}/systemd_timesyncd_check_time_duration.prom"
    fi
  fi
}
{% endif %}

check_script_user() {
  if [ "$(${whoami})" != "${user}" ]; then
    retval=77
    severity='Error'
    message="Please run script as user '${user}'"
    ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: ${severity}: ${message}"
    exit "${retval}"
  fi
}

create_lockfile() {
  if [ ! -e "${lockfile}" ]; then
    ${touch} "${lockfile}" || log_and_exit_on_error "$?" 'Warning' 'Could not create lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile does already exist. Please investigate.'
  fi
}

remove_lockfile() {
  if [ -e "${lockfile}" ]; then
    ${rm} -f "${lockfile}" || log_and_exit_on_error "$?" 'Warning' 'Could not remove lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile did not exist. Please investigate.'
  fi
}

log_and_exit_on_error() {
  retval="$1"
  severity="$2"
  message="$3"
  if [ "${retval}" -ne 0 ]; then
    ${rm} -f "${lockfile}"

    if [ -t 1 ] ; then
      ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: ${severity}: ${message}"
    fi

    ${logger} -t "${script}" "${severity}: ${message}"

{% if (systemd_timesyncd_monitor_mail_state == True) %}
    mail_error "${retval}" "${severity}" "${message}"
{% endif %}

{% if (systemd_timesyncd_monitor_prom_state == True) %}
    update_prom "${retval}" "${time_start}" "${time_exec}"
{% endif %}

    exit "${retval}"
  fi
}

log_and_exit() {
  time_end=$(${date} '+%s')
  time_exec=$(${expr} "${time_end}" - "${time_start}")
  time_hr=$(${date} -d "1970-01-01 ${time_exec} sec" '+%H:%M:%S')

  retval=0
  severity='Info'
  message='System time is synchronized.'
  ${logger} -t "${script}" "${severity}: ${message} Duration: ${time_hr}"

{% if (systemd_timesyncd_monitor_prom_state == True) %}
  update_prom "${retval}" "${time_start}" "${time_exec}"
{% endif %}

  exit "${retval}"
}

watch_and_wait_for_change() {
  watch_key="$1"
  watch_value="$2"
  watch_option="$3"
  time_step="$4"
  time_maximum="$5"
  while ! ${watch_key} | ${grep} ${watch_option} "${watch_value}" > /dev/null 2>&1 ; do
    log_and_exit_on_error "$?" 'Error' 'Unable to get system time status.'
    if [ "${time_initial}" -lt "${time_maximum}" ]; then
      time_initial=$(${expr} "${time_initial}" + "${time_step}")
      ${sleep} "${time_initial}"
    else
    log_and_exit_on_error "1" 'Error' 'System time is not synchronized.'
    fi
  done
}

# SCRIPT

check_script_user

create_lockfile

# Get system time status and wait while 'unsynchronised'
time_initial=0
watch_and_wait_for_change "${timedatectl}" 'System clock synchronized: yes' '' '2' '32'

# Get modification time (mtime) of clock file
time_clock=$(${stat} --format=%Y /var/lib/systemd/timesync/clock)

# Calculate time since last successful synchronization
last_sync=$(${expr} "${time_start}" - "${time_clock}")

# Double PollIntervalMaxSec time
time_max=$(${expr} "${poll_interval_max_sec}" \* 3)

# Alert if time since last successful synchronization is greater than three times PollIntervalMaxSec
if [ ${last_sync} -gt ${time_max} ]; then
  log_and_exit_on_error '1' 'Error' "System time has not been synchronized for more than ${time_max} seconds."
fi

remove_lockfile

log_and_exit
