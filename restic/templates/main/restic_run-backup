#!/usr/bin/env sh

{{ansible_managed|comment(decoration='#')}}

# Shell variables

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin'

# Commands

WHICH='/usr/bin/which' && [ -x ${WHICH} ] || { echo "Error: Command 'which' not found."; exit 127; }
BASENAME=$(${WHICH} basename) || { echo "Error: Command 'basename' not found."; exit 127; }
DATE=$(${WHICH} date) || { echo "Error: Command 'date' not found."; exit 127; }
ECHO=$(${WHICH} echo) || { echo "Error: Command 'echo' not found."; exit 127; }
EXPR=$(${WHICH} expr) || { echo "Error: Command 'expr' not found."; exit 127; }
HOSTNAME=$(${WHICH} hostname) || { echo "Error: Command 'hostname' not found."; exit 127; }
LOGGER=$(${WHICH} logger) || { echo "Error: Command 'logger' not found."; exit 127; }
{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
MAILX=$(${WHICH} mailx) || { echo "Error: Command 'mailx' not found."; exit 127; }
{% endif %}
RM=$(${WHICH} rm) || { echo "Error: Command 'rm' not found."; exit 127; }
TR=$(${WHICH} tr) || { echo "Error: Command 'tr' not found."; exit 127; }
TOUCH=$(${WHICH} touch) || { echo "Error: Command 'touch' not found."; exit 127; }
WHOAMI=$(${WHICH} whoami) || { echo "Error: Command 'whoami' not found."; exit 127; }

RESTIC='{{file_dst_restic}}' && [ -x ${RESTIC} ] || { echo "Error: Command 'restic' not found."; exit 127; }

# Environment variables

HOST=$(${HOSTNAME} -s) || { echo "Error: Host name unknown."; exit 68; }
SCRIPT="$(${BASENAME} $0)[$$]" || { echo "Error: Command invoked cannot execute."; exit 126; }
TIME_START=$(${DATE} '+%s')
USER='{{file_owner_restic_run_backup}}'
LOCKFILE='/var/tmp/restic_run-backup.lock'
EXCLUDE='{{file_dst_exclude_conf}}'
INCLUDE='{{file_dst_include_conf}}'
LOG_FILE='{{file_dst_restic_log}}'
PASSWORD='{{file_dst_password_conf}}'
REPOSITORY='{{file_dst_repository_conf}}'
{% if not (restic_cacert == '') %}
CA_FILE='{{restic_cacert}}'
{% endif %}
KEEP_HOURLY='{{restic_keep_hourly}}'
KEEP_DAILY='{{restic_keep_daily}}'
KEEP_WEEKLY='{{restic_keep_weekly}}'
KEEP_MONTHLY='{{restic_keep_monthly}}'
LIMIT_DOWNLOAD='{{restic_limit_download}}'
LIMIT_UPLOAD='{{restic_limit_upload}}'
TEXTFILE_COLLECTOR='{{restic_monitor_prom_textfile_collector}}'

{% if not (restic_http_proxy == '') %}
export HTTP_PROXY='{{restic_http_proxy}}'
{% endif %}
{% if not (restic_https_proxy == '') %}
export HTTPS_PROXY='{{restic_https_proxy}}'
{% endif %}

{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
MAIL_FROM_ADDRESS='{{restic_monitor_mail_from_address}}'
MAIL_TO_ADDRESS='{% for item in restic_monitor_mail_to_address %}{{item}}{% if not loop.last %},{% endif %}{% endfor %}'
MAIL_SUBJECT='restic: Run Backup - Error ({{ansible_hostname}})'
{% endif %}

# Functions

{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
mail_error() {
    local exit_code=${1}
    local message=${2}
    local mail_body="ERROR

Message     : ${message}
Exit Code   : ${exit_code}
Date & Time : $(${DATE} '+%Y-%m-%dT%H:%M:%S%z')

SCRIPT

Name        : restic_run-backup
Type        : Shell script
PID         : ${$}

SYSTEM

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}"

    ${ECHO} "${mail_body}" | ${MAILX} -r "${MAIL_FROM_ADDRESS}" -s "${MAIL_SUBJECT}" "${MAIL_TO_ADDRESS}" >/dev/null 2>&1
}
{% endif %}

{% if (restic_monitor_prom_state is match('true|yes|enable')) %}
update_prom() {
    local exit_code=${1}
    local time_exec=${2}

    if [ -w "${TEXTFILE_COLLECTOR}" ]; then
        ${ECHO} -e "# HELP restic_run_backup_exit The script's exit code.\n"\
"# TYPE restic_run_backup_exit counter\n"\
"restic_run_backup_exit ${exit_code}" >"${TEXTFILE_COLLECTOR}/restic_run_backup_exit.prom"

        if [ -z "${TIME_START}" ]; then
            ${RM} -f "${TEXTFILE_COLLECTOR}/restic_run_backup_start.prom"
        else
            ${ECHO} -e "# HELP restic_run_backup_start The script's start time in epoch.\n"\
"# TYPE restic_run_backup_start counter\n"\
"restic_run_backup_start ${TIME_START}" >"${TEXTFILE_COLLECTOR}/restic_run_backup_start.prom"
        fi

        if [ -z "${time_exec}" ]; then
            ${RM} -f "${TEXTFILE_COLLECTOR}/restic_run_backup_duration.prom"
        else
            ${ECHO} -e "# HELP restic_run_backup_duration The script's execution duration in seconds.\n"\
"# TYPE restic_run_backup_duration counter\n"\
"restic_run_backup_duration ${time_exec}" >"${TEXTFILE_COLLECTOR}/restic_run_backup_duration.prom"
        fi
    fi
}
{% endif %}

check_script_user() {
    if [ "$(${WHOAMI})" != "${USER}" ]; then
        local exit_code=77
        local message="Please run script as user '${USER}'"

        if [ -t 1 ]; then
            ${ECHO} "$(${DATE} '+%Y-%m-%dT%H:%M:%S%z') - ${HOST} - ${SCRIPT}: ${message}" >&2
        fi

        exit ${exit_code}
    fi
}

create_lockfile() {
    if [ ! -e "${LOCKFILE}" ]; then
        ${TOUCH} ${LOCKFILE} || log_and_exit_on_error "${?}" 'Could not create lockfile. Please investigate.'
    else
        log_and_exit_on_error "${?}" 'Lockfile does already exist. Please investigate.'
    fi
}

remove_lockfile() {
    if [ -e "${LOCKFILE}" ]; then
        ${RM} -f ${LOCKFILE} || log_and_exit_on_error "${?}" 'Could not remove lockfile. Please investigate.'
    else
        log_and_exit_on_error "${?}" 'Lockfile did not exist. Please investigate.'
    fi
}

log_and_exit_on_error() {
    local exit_code=${1}
    local message=${2}
    if [ ${exit_code} -ne 0 ]; then
        ${RM} -f ${LOCKFILE}

        if [ -t 1 ]; then
            ${ECHO} "$(${DATE} '+%Y-%m-%dT%H:%M:%S%z') - ${HOST} - ${SCRIPT}: ${message}" >&2
        fi

        ${LOGGER} -t ${SCRIPT} "${message}"

{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
        mail_error ${exit_code} "${message}"
{% endif %}

{% if (restic_monitor_prom_state is match('true|yes|enable')) %}
        update_prom "${exit_code}" "${time_exec}"
{% endif %}

        add_log_header 'backup failed'

        exit ${exit_code}
    fi
}

log_and_exit() {
    local time_end=$(${DATE} '+%s')
    local time_exec=$(${EXPR} ${time_end} - ${TIME_START})
    local time_hr=$(${DATE} -d "1970-01-01 ${time_exec} sec" '+%H:%M:%S')
    local exit_code=0
    local message='Backup created successfully.'

    if [ -t 1 ]; then
        ${ECHO} "$(${DATE} '+%Y-%m-%dT%H:%M:%S%z') - ${HOST} - ${SCRIPT}: ${message}"
    fi

    ${LOGGER} -t ${SCRIPT} "${message} Duration: ${time_hr}"

{% if (restic_monitor_prom_state is match('true|yes|enable')) %}
    update_prom "${exit_code}" "${time_exec}"
{% endif %}

    exit ${exit_code}
}

add_log_header() {
    local name=${1}
    local name_upper=$(${ECHO} ${name} | ${TR} '[:lower:]' '[:upper:]')
    local date_time=$(${DATE} '+%Y-%m-%dT%H:%M:%S%z')
    echo "# ${name_upper} | ${date_time}" >>${LOG_FILE}
}

create_backup_repository() {
    # Get stats to verify backup repository
    ${RESTIC} stats --repository-file ${REPOSITORY} --password-file ${PASSWORD} \
        {% if not (restic_cacert == '') %}--cacert "${CA_FILE}"{% endif %} \
        >>${LOG_FILE} 2>&1
    if [ ${?} -ne 0 ]; then
        # Initialize backup repository if inexistent
        ${RESTIC} init --repository-file ${REPOSITORY} --password-file ${PASSWORD} \
            {% if not (restic_cacert == '') %}--cacert "${CA_FILE}"{% endif %} \
            >>${LOG_FILE} 2>&1
        log_and_exit_on_error "${?}" 'Unable to create backup repository.'
    fi
}

create_new_backup() {
    ${RESTIC} backup --repository-file ${REPOSITORY} --password-file ${PASSWORD} \
        --limit-download ${LIMIT_DOWNLOAD} --limit-upload ${LIMIT_UPLOAD} --files-from ${INCLUDE} \
        --exclude-caches --exclude-file ${EXCLUDE} --compression auto \
        {% if not (restic_cacert == '') %}--cacert "${CA_FILE}"{% endif %} \
        >>${LOG_FILE} 2>&1
    log_and_exit_on_error "${?}" 'Unable to create new backup.'
}

remove_old_backups() {
    ${RESTIC} forget --repository-file ${REPOSITORY} --password-file ${PASSWORD} \
        --limit-download ${LIMIT_DOWNLOAD} --limit-upload ${LIMIT_UPLOAD} \
        --keep-hourly ${KEEP_HOURLY} --keep-daily ${KEEP_DAILY} --keep-weekly ${KEEP_WEEKLY} --keep-monthly ${KEEP_MONTHLY} --prune \
        --compression auto \
        {% if not (restic_cacert == '') %}--cacert "${CA_FILE}"{% endif %} \
        >>${LOG_FILE} 2>&1
    log_and_exit_on_error "${?}" 'Unable to remove old backups.'
}

check_backup_repository() {
    ${RESTIC} check --repository-file ${REPOSITORY} --password-file ${PASSWORD} \
        --limit-download ${LIMIT_DOWNLOAD} --limit-upload ${LIMIT_UPLOAD} \
        --with-cache \
        {% if not (restic_cacert == '') %}--cacert "${CA_FILE}"{% endif %} \
        >>${LOG_FILE} 2>&1
    log_and_exit_on_error "${?}" 'Unable to check backup repository.'
}

# Establish run order
main() {
    check_script_user
    create_lockfile
    add_log_header 'backup started'
    create_backup_repository
    create_new_backup
    remove_old_backups
    check_backup_repository
    add_log_header 'backup successful'
    remove_lockfile
    log_and_exit
}

main
