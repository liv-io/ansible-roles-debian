#!/usr/bin/env sh

{{ansible_managed|comment(decoration='#')}}

#-------------------------------------------------------------------------------
# SHELL VARIABLES
#-------------------------------------------------------------------------------

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin'

#-------------------------------------------------------------------------------
# COMMANDS
#-------------------------------------------------------------------------------

which='/usr/bin/which' && [ -x ${which} ] || { echo "Error: Command 'which' not found."; exit 127; }
basename=$(${which} basename) || { echo "Error: Command 'basename' not found."; exit 127; }
date=$(${which} date) || { echo "Error: Command 'date' not found."; exit 127; }
echo=$(${which} echo) || { echo "Error: Command 'echo' not found."; exit 127; }
expr=$(${which} expr) || { echo "Error: Command 'expr' not found."; exit 127; }
hostname=$(${which} hostname) || { echo "Error: Command 'hostname' not found."; exit 127; }
logger=$(${which} logger) || { echo "Error: Command 'logger' not found."; exit 127; }
{% if (chrony_monitor_mail_state is match('true|yes|enable')) %}
mailx=$(${which} mailx) || { echo "Error: Command 'mailx' not found."; exit 127; }
{% endif %}
rm=$(${which} rm) || { echo "Error: Command 'rm' not found."; exit 127; }
touch=$(${which} touch) || { echo "Error: Command 'touch' not found."; exit 127; }
whoami=$(${which} whoami) || { echo "Error: Command 'whoami' not found."; exit 127; }

chronyd='{{chronyd}}'

#-------------------------------------------------------------------------------
# VARIABLES
#-------------------------------------------------------------------------------

host=$(${hostname} -s) || { echo "Error: Host name unknown."; exit 68; }
script="$(${basename} $0)[$$]" || { echo "Error: Command invoked cannot execute."; exit 126; }
time_start=$(${date} '+%s')
user='{{file_owner_chrony_update_time}}'
lockfile='/var/tmp/chrony_update-time.lock'
retval=0
severity='Debug'
message='Please check log files for more information.'

chrony_servers='{% for item in chrony_server %}{{item.address}}{% if not loop.last %} {% endif %}{% endfor %}'
textfile_collector='{{chrony_monitor_prom_textfile_collector}}'

{% if (chrony_monitor_mail_state is match('true|yes|enable')) %}
mail_from_address='{{chrony_monitor_mail_from_address}}'
mail_to_address='{% for item in chrony_monitor_mail_to_address %}{{item}}{% if not loop.last %},{% endif %}{% endfor %}'
mail_subject='chrony: Update Time - Error ({{ansible_hostname}})'
{% endif %}

#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------

{% if (chrony_monitor_mail_state is match('true|yes|enable')) %}
mail_error() {
  retval="$1"
  severity="$2"
  message="$3"
  mail_body="--------------------------------------------------------------------------------
ERROR
--------------------------------------------------------------------------------

Message     : ${message}
Severity    : ${severity}
Date & Time : $(${date} '+%Y-%m-%dT%H:%M:%S%z')

--------------------------------------------------------------------------------
SCRIPT
--------------------------------------------------------------------------------

Name        : chrony_update-time
Type        : Shell script
PID         : $$

--------------------------------------------------------------------------------
SYSTEM
--------------------------------------------------------------------------------

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}"

  ${echo} "${mail_body}" | ${mailx} -r "${mail_from_address}" -s "${mail_subject}" "${mail_to_address}" > /dev/null 2>&1
}
{% endif %}

{% if (chrony_monitor_prom_state is match('true|yes|enable')) %}
update_prom() {
  retval="$1"
  time_start="$2"
  time_exec="$3"

  if [ -w "${textfile_collector}" ]; then
    ${echo} -e "# HELP chrony_update_time_exit The script's exit code.\n"\
"# TYPE chrony_update_time_exit counter\n"\
"chrony_update_time_exit ${retval}" > "${textfile_collector}/chrony_update_time_exit.prom"

    if [ -z "${time_start}" ] ; then
      ${rm} -f "${textfile_collector}/chrony_update_time_start.prom"
    else
      ${echo} -e "# HELP chrony_update_time_start The script's start time in epoch.\n"\
"# TYPE chrony_update_time_start counter\n"\
"chrony_update_time_start ${time_start}" > "${textfile_collector}/chrony_update_time_start.prom"
    fi

    if [ -z "${time_exec}" ] ; then
      ${rm} -f "${textfile_collector}/chrony_update_time_duration.prom"
    else
      ${echo} -e "# HELP chrony_update_time_duration The script's execution duration in seconds.\n"\
"# TYPE chrony_update_time_duration counter\n"\
"chrony_update_time_duration ${time_exec}" > "${textfile_collector}/chrony_update_time_duration.prom"
    fi
  fi
}
{% endif %}

check_script_user() {
  if [ "$(${whoami})" != "${user}" ]; then
    retval=77
    severity='Error'
    message="Please run script as user '${user}'"
    ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: ${severity}: ${message}"
    exit "${retval}"
  fi
}

create_lockfile() {
  if [ ! -e "${lockfile}" ]; then
    ${touch} "${lockfile}" || log_and_exit_on_error "$?" 'Warning' 'Could not create lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile does already exist. Please investigate.'
  fi
}

remove_lockfile() {
  if [ -e "${lockfile}" ]; then
    ${rm} -f "${lockfile}" || log_and_exit_on_error "$?" 'Warning' 'Could not remove lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile did not exist. Please investigate.'
  fi
}

log_and_exit_on_error() {
  retval="$1"
  severity="$2"
  message="$3"
  if [ "${retval}" -ne 0 ]; then
    ${rm} -f "${lockfile}"

    if [ -t 1 ] ; then
      ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: ${severity}: ${message}"
    fi

    ${logger} -t "${script}" "${severity}: ${message}"

{% if (chrony_monitor_mail_state is match('true|yes|enable')) %}
    mail_error "${retval}" "${severity}" "${message}"
{% endif %}

{% if (chrony_monitor_prom_state is match('true|yes|enable')) %}
    update_prom "${retval}" "${time_start}" "${time_exec}"
{% endif %}

    exit "${retval}"
  fi
}

log_and_exit() {
  time_end=$(${date} '+%s')
  time_exec=$(${expr} "${time_end}" - "${time_start}")
  time_hr=$(${date} -d "1970-01-01 ${time_exec} sec" '+%H:%M:%S')

  retval=0
  severity='Info'
  message='System time and hardware clock updated.'
  ${logger} -t "${script}" "${severity}: ${message} Duration: ${time_hr}"

{% if (chrony_monitor_prom_state is match('true|yes|enable')) %}
  update_prom "${retval}" "${time_start}" "${time_exec}"
{% endif %}

  exit "${retval}"
}

#-------------------------------------------------------------------------------
# SCRIPT
#-------------------------------------------------------------------------------

check_script_user

create_lockfile

# Update the system time by polling NTP servers
for chrony_server in ${chrony_servers} ; do
  ${chronyd} "server ${chrony_server} iburst" > /dev/null 2>&1
  if [ "$?" -eq 0 ]; then
    chrony_status=0
    break;
  else
    chrony_status=1
  fi
done
log_and_exit_on_error "${chrony_status}" 'Error' 'Unable to update the system time.'

remove_lockfile

log_and_exit
