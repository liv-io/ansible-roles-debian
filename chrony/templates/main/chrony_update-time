#!/usr/bin/env sh

{{ansible_managed|comment(decoration='#')}}

# Shell variables

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin'

# Commands

WHICH='/usr/bin/which' && [ -x ${WHICH} ] || { echo "Error: Command 'which' not found."; exit 127; }
BASENAME=$(${WHICH} basename) || { echo "Error: Command 'basename' not found."; exit 127; }
DATE=$(${WHICH} date) || { echo "Error: Command 'date' not found."; exit 127; }
ECHO=$(${WHICH} echo) || { echo "Error: Command 'echo' not found."; exit 127; }
EXPR=$(${WHICH} expr) || { echo "Error: Command 'expr' not found."; exit 127; }
HOSTNAME=$(${WHICH} hostname) || { echo "Error: Command 'hostname' not found."; exit 127; }
LOGGER=$(${WHICH} logger) || { echo "Error: Command 'logger' not found."; exit 127; }
RM=$(${WHICH} rm) || { echo "Error: Command 'rm' not found."; exit 127; }
TOUCH=$(${WHICH} touch) || { echo "Error: Command 'touch' not found."; exit 127; }
WHOAMI=$(${WHICH} whoami) || { echo "Error: Command 'whoami' not found."; exit 127; }

CHRONYD='{{chronyd}}'

{% if (chrony_monitor_mail_state == True) %}
MAILX=$(${WHICH} mailx) || { echo "Error: Command 'mailx' not found."; exit 127; }
{% endif %}

# Environment variables

HOST=$(${HOSTNAME} -s) || { echo "Error: Host name unknown."; exit 68; }
SCRIPT="$(${BASENAME} $0)[$$]" || { echo "Error: Command invoked cannot execute."; exit 126; }
SCRIPT_NAME="$(${BASENAME} $0)" || { echo "Error: Command invoked cannot execute."; exit 126; }
TIME_START=$(${DATE} '+%s')
USER='{{file_owner_chrony_update_time}}'
LOCKFILE='/var/tmp/chrony_update-time.lock'
TEXTFILE_COLLECTOR='{{chrony_monitor_prom_textfile_collector}}'

CHRONY_SERVERS='{% for item in chrony_server %}{{item.address}}{% if not loop.last %} {% endif %}{% endfor %}'

{% if (chrony_monitor_mail_state == True) %}
MAIL_FROM_ADDRESS='{{chrony_monitor_mail_from_address}}'
MAIL_TO_ADDRESS='{% for item in chrony_monitor_mail_to_address %}{{item}}{% if not loop.last %},{% endif %}{% endfor %}'
MAIL_SUBJECT='chrony: Update Time - Error ({{ansible_hostname}})'
{% endif %}

# Functions

{% if (chrony_monitor_mail_state == True) %}
mail_error() {
    local exit_code=${1}
    local message=${2}
    local mail_body="ERROR

Message     : ${message}
Exit Code   : ${exit_code}
Date & Time : $(${DATE} '+%Y-%m-%dT%H:%M:%S%z')

SCRIPT

Name        : ${SCRIPT_NAME}
Type        : Shell script
PID         : ${$}

SYSTEM

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}"

    ${ECHO} "${mail_body}" | ${MAILX} -r "${MAIL_FROM_ADDRESS}" -s "${MAIL_SUBJECT}" "${MAIL_TO_ADDRESS}" >/dev/null 2>&1
}
{% endif %}

{% if (chrony_monitor_prom_state == True) %}
update_prom() {
    local exit_code=${1}
    local time_exec=${2}

    if [ -w "${TEXTFILE_COLLECTOR}" ]; then
        ${ECHO} -e "# HELP chrony_update_time_exit The script's exit code.\n"\
"# TYPE chrony_update_time_exit counter\n"\
"chrony_update_time_exit ${exit_code}" >"${TEXTFILE_COLLECTOR}/chrony_update_time_exit.prom"

        if [ -z "${TIME_START}" ]; then
            ${RM} -f "${TEXTFILE_COLLECTOR}/chrony_update_time_start.prom"
        else
            ${ECHO} -e "# HELP chrony_update_time_start The script's start time in epoch.\n"\
"# TYPE chrony_update_time_start counter\n"\
"chrony_update_time_start ${TIME_START}" >"${TEXTFILE_COLLECTOR}/chrony_update_time_start.prom"
        fi

        if [ -z "${time_exec}" ]; then
            ${RM} -f "${TEXTFILE_COLLECTOR}/chrony_update_time_duration.prom"
        else
            ${ECHO} -e "# HELP chrony_update_time_duration The script's execution duration in seconds.\n"\
"# TYPE chrony_update_time_duration counter\n"\
"chrony_update_time_duration ${time_exec}" >"${TEXTFILE_COLLECTOR}/chrony_update_time_duration.prom"
        fi
    fi
}
{% endif %}

check_script_user() {
    if [ "$(${WHOAMI})" != "${USER}" ]; then
        local exit_code=77
        local message="Please run script as user '${USER}'"

        if [ -t 1 ]; then
            ${ECHO} "$(${DATE} '+%Y-%m-%dT%H:%M:%S%z') - ${HOST} - ${SCRIPT}: ${message}" >&2
        fi

        exit ${exit_code}
    fi
}

create_lockfile() {
    if [ ! -e "${LOCKFILE}" ]; then
        ${TOUCH} ${LOCKFILE} || log_and_exit_on_error "${?}" 'Could not create lockfile. Please investigate.'
    else
        log_and_exit_on_error "${?}" 'Lockfile does already exist. Please investigate.'
    fi
}

remove_lockfile() {
    if [ -e "${LOCKFILE}" ]; then
        ${RM} -f ${LOCKFILE} || log_and_exit_on_error "${?}" 'Could not remove lockfile. Please investigate.'
    else
        log_and_exit_on_error "${?}" 'Lockfile did not exist. Please investigate.'
    fi
}

log_and_exit_on_error() {
    local exit_code=${1}
    local message=${2}

    if [ ${exit_code} -ne 0 ]; then
        ${RM} -f ${LOCKFILE}

        if [ -t 1 ]; then
            ${ECHO} "$(${DATE} '+%Y-%m-%dT%H:%M:%S%z') - ${HOST} - ${SCRIPT}: ${message}" >&2
        fi

        ${LOGGER} -t ${SCRIPT} "${message}"

{% if (chrony_monitor_mail_state == True) %}
        mail_error ${exit_code} "${message}"
{% endif %}

{% if (chrony_monitor_prom_state == True) %}
        update_prom "${exit_code}" "${time_exec}"
{% endif %}

        exit ${exit_code}
    fi
}

log_and_exit() {
    local time_end=$(${DATE} '+%s')
    local time_exec=$(${EXPR} ${time_end} - ${TIME_START})
    local time_hr=$(${DATE} -d "1970-01-01 ${time_exec} sec" '+%H:%M:%S')
    local exit_code=${1}
    local message=${2}

    if [ -t 1 ]; then
        ${ECHO} "$(${DATE} '+%Y-%m-%dT%H:%M:%S%z') - ${HOST} - ${SCRIPT}: ${message}"
    fi

    ${LOGGER} -t ${SCRIPT} "${message} Duration: ${time_hr}"

{% if (chrony_monitor_prom_state == True) %}
    update_prom "${exit_code}" "${time_exec}"
{% endif %}

    exit ${exit_code}
}

update_system_time() {
    for chrony_server in ${CHRONY_SERVERS} ; do
        ${CHRONYD} "server ${chrony_server} iburst" >/dev/null 2>&1
        if [ "${?}" -eq 0 ]; then
            chrony_status=0
            break;
        else
            chrony_status=1
        fi
    done
    log_and_exit_on_error "${chrony_status}" 'Error' 'Unable to update the system time.'
}

# Establish run order
main() {
    check_script_user
    create_lockfile
    update_system_time
    remove_lockfile
    log_and_exit '0' 'System time and hardware clock updated.'
}

main
